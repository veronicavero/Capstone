// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
let squareVerifier = artifacts.require('SquareVerifier');
// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
let proofSet = require('../../zokrates/code/square/proof');
    
// Test verification with incorrect proof
contract ('TestSquareVerifier', accounts => {
    const account_one = accounts[0];
    
    beforeEach(async function() {
        this.contract = await squareVerifier.new({from: account_one});
    })
    

    it ('verify with valid proof', async function(){
        let verified = await this.contract.verifyTx.call(proofSet.proof.A, proofSet.proof.A_p,
            proofSet.proof.B, proofSet.proof.B_p, proofSet.proof.C, proofSet.proof.C_p,
            proofSet.proof.H, proofSet.proof.K, proofSet.input, {from: account_one});
        assert.equal(verified, true, "verified with valid proof.");
    })

    it ('cannot verify with invalid proof', async function(){
        let input = [11,2];
        let verified = await this.contract.verifyTx.call(proofSet.proof.A, proofSet.proof.A_p,
            proofSet.proof.B, proofSet.proof.B_p, proofSet.proof.C, proofSet.proof.C_p,
            proofSet.proof.H, proofSet.proof.K, input, {from: account_one});
        assert.equal(verified, false, "verified with invalid proof.");
    })
})